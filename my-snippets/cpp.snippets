# main
snippet main
	int main(int argc, const char* argv[]) {
		${0}
		return 0;
	}
endsnippet

# #include <...>
snippet inc<
	#include <${1:iostream}>
endsnippet

# #include "..."
snippet inc"
	#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

# ifndef...define...endif
snippet ifndef
	#ifndef ${1:_CLASS_H_} 
	#define $1

	${0}

	#endif /* ifndef $1 */
endsnippet


##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
endsnippet

snippet binc
	#include <boost/${1:shared_ptr}.hpp>
endsnippet

##
## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
endsnippet

# std::vector
snippet vector
	std::vector<${1:T}> ${2};
endsnippet

# std::deque
snippet deque
	std::deque<${1:T}> ${2};
endsnippet

# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
endsnippet

# std::list
snippet list
	std::list<${1:T}> ${2};
endsnippet

# std::set
snippet set
	std::set<${1:T}> ${2};
endsnippet

# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
endsnippet

# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
endsnippet

# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
endsnippet

# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
endsnippet

# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

# std::stack
snippet stack
	std::stack<${1:T}> ${2};
endsnippet

# std::queue
snippet queue
	std::queue<${1:T}> ${2};
endsnippet

# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
endsnippet

##
## Access Modifiers
# private
snippet pri
	private
endsnippet

# protected
snippet pro
	protected
endsnippet

# public
snippet pub
	public
endsnippet

# friend
snippet fr
	friend
endsnippet

# mutable
snippet mu
	mutable
endsnippet

##
## Class
# class
snippet cl
	/*! \class $1
	 *  \brief ${3:Brief class description}
	 *
	 *  ${4:Detailed description}
	 */
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		virtual ~$1();

	protected:
		m_${5}; /*!< ${6:Member description} */
	};
endsnippet

# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
endsnippet

# member function implementation without parameters
snippet dmfun0
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
endsnippet

