# main
snippet main
int main(int argc, const char* argv[]) {
	${0}
	return 0;
}
endsnippet

# #include <...>
snippet inc<
#include <${1:iostream}>
endsnippet

# #include "..."
snippet inc"
#include "${1:Example.h}"
endsnippet

# ifndef...define...endif
snippet ifndef
#ifndef ${1:_EXAMPLE_FILE_H_} 
#define $1

${0}

#endif /* $1 */
endsnippet

# std::array
snippet array
std::array<${1:T},${2:N}> ${0}
endsnippet

# std::vector
snippet vector
std::vector<${1:T}> ${0}
endsnippet

# std::deque
snippet deque
std::deque<${1:T}> ${0}
endsnippet

# std::forward_list
snippet flist
std::forward_list<${1:T}> ${0}
endsnippet

# std::list
snippet list
std::list<${1:T}> ${0}
endsnippet

# std::set
snippet set
std::set<${1:T}> ${0}
endsnippet

# std::map
snippet map
std::map<${1:K},${2:V}> ${0}
endsnippet

# std::multiset
snippet mset
std::multiset<${1:T}> ${0}
endsnippet

# std::multimap
snippet mmap
std::multimap<${1:K},${2:V}> ${0}
endsnippet

# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${0}
endsnippet

# std::unordered_map
snippet umap
std::unordered_map<${1:K},${2:V}> ${0}
endsnippet

# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${0}
endsnippet

# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:K},${2:V}> ${0}
endsnippet

# std::stack
snippet stack
std::stack<${1:T}> ${0}
endsnippet

# std::queue
snippet queue
std::queue<${1:T}> ${0}
endsnippet

# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${0}
endsnippet

# private
snippet pri
private ${0}
endsnippet

# protected
snippet pro
protected ${0}
endsnippet

# public
snippet pub
public ${0}
endsnippet

# friend
snippet fr
friend ${0}
endsnippet

# mutable
snippet mu
mutable ${0}
endsnippet

# class
snippet class
/** 
 * ${5:Detailed description}
 */
class ${1:ExampleClass} ${2:: public BaseClass} {
	public:
		$1(${3});
		virtual ~$1();

		${0}

	private:
		${4}	
};
endsnippet

# namespace
snippet namespace
namespace ${1:std} {
	${0}
} /* namespace $1 */
endsnippet

# std::cout
snippet cout
std::cout << ${0} << std::endl;
endsnippet

# std::cin
snippet cin
std::cin >> ${0};
endsnippet

# for loop
snippet for
for (${1:size_t} ${2:i} = ${3:0}; $2 ${4:<} ${5:count}; ${6:++}$2) {
	${0}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:item} : ${3:container}) {
	${0}
}
endsnippet

# lamda (one line)
snippet lambda
[${1}](${2}) {
	${0}
};
endsnippet

# snippets exception
snippet try
try {
	${0}
} catch(${1}) {

}
endsnippet

# unique pointer
snippet uptr
std::unique_ptr<${1:T}> ${0}
endsnippet

# shared pointer
snippet sptr
std::shared_ptr<${1:T}> ${0}
endsnippet

# comment
snippet cmt
/**
 * ${1:comment}
 */
endsnippet

# getter declaration
snippet getdec
${1:const std::string&} ${2:getStr}(${3}) ${4:const};
endsnippet

# setter declaration
snippet setdec
${1:void} ${2:setStr}(${3:const std::string& str});
endsnippet

# getter definition
snippet getdef
${1:const std::string&} ${2:ExampleClass}::${3:getStr}(${4}) ${5:const} {
	${0}
}
endsnippet

# setter definition
snippet setdef
${1:void} ${2:ExampleClass}::${3:setStr}(${4:const std::string& str}) {
	${0}
)
endsnippet
