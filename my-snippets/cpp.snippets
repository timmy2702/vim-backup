# main
snippet main
int main(int argc, const char* argv[]) {
	${0}
	return 0;
}
endsnippet

# #include <...>
snippet inc<
#include <${1:iostream}>
${0}
endsnippet

# #include "..."
snippet inc"
#include "${1:Example.h}"
${0}
endsnippet

# ifndef...define...endif
snippet ifndef
#ifndef ${1:_EXAMPLE_FILE_H_} 
#define $1

${0}

#endif /* $1 */
endsnippet

# std::array
snippet array
std::array<${1:T},${2:N}> ${0}
endsnippet

# std::vector
snippet vector
std::vector<${1:T}> ${0}
endsnippet

# std::deque
snippet deque
std::deque<${1:T}> ${0}
endsnippet

# std::forward_list
snippet flist
std::forward_list<${1:T}> ${0}
endsnippet

# std::list
snippet list
std::list<${1:T}> ${0}
endsnippet

# std::set
snippet set
std::set<${1:T}> ${0}
endsnippet

# std::map
snippet map
std::map<${1:K},${2:V}> ${0}
endsnippet

# std::multiset
snippet mset
std::multiset<${1:T}> ${0}
endsnippet

# std::multimap
snippet mmap
std::multimap<${1:K},${2:V}> ${0}
endsnippet

# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${0}
endsnippet

# std::unordered_map
snippet umap
std::unordered_map<${1:K},${2:V}> ${0}
endsnippet

# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${0}
endsnippet

# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:K},${2:V}> ${0}
endsnippet

# std::stack
snippet stack
std::stack<${1:T}> ${0}
endsnippet

# std::queue
snippet queue
std::queue<${1:T}> ${0}
endsnippet

# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${0}
endsnippet

# private
snippet pri
private ${0}
endsnippet

# protected
snippet pro
protected ${0}
endsnippet

# public
snippet pub
public ${0}
endsnippet

# friend
snippet fr
friend ${0}
endsnippet

# mutable
snippet mu
mutable ${0}
endsnippet

# class
snippet class
/** 
 *  ${5:Detailed description}
 */
class ${1:ExampleClass} {
	public:
		$1(${2});
		virtual ~$1();

		${0}

	private:
		${3}	
};
endsnippet

# namespace
snippet namespace
namespace ${1:std} {
	${0}
} /* namespace $1 */
endsnippet

# std::cout
snippet cout
std::cout << ${1} << std::endl;
${0}
endsnippet

# std::cin
snippet cin
std::cin >> ${1};
${0}
endsnippet

# for loop
snippet for
for (${1:size_t} ${2:i} = ${3:0}; $2 ${4:<} ${5:count}; ${6:++}$2) {
	${0}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:item} : ${3:container}) {
	${0}
}
endsnippet

# lamda (one line)
snippet lambda
[${1}](${2}) {
	${0}
};
endsnippet

# snippets exception
snippet try
try {
	${0}
} catch(${1}) {

}
endsnippet

# unique pointer
snippet uptr
std::unique_ptr<{$1:T}> ${0}
endsnippet

# shared pointer
snippet sptr
std::shared_ptr<{$1:T}> ${0}
endsnippet
